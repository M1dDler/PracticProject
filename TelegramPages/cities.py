import datetime
from telebot import types
from telebot.async_telebot import AsyncTeleBot
from TelegramRequests.dataRequests import *

async def cities(bot, message):
    cities = getCities()
    
    text_message = "<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–¥–∞—á—É –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–∞–∫–∏—Ö –º—ñ—Å—Ç:</b> ‚§µÔ∏è\n\n" + "\n".join(str('üìå '+x['city_name']) for x in cities)
    await bot.send_message(chat_id=message.from_user.id, text=text_message +'\n\n'+
                           '–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤–≤–µ–¥—ñ—Ç—å –≤ —á–∞—Ç –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É ‚úèÔ∏è'
                           ,parse_mode='HTML')
    
    
async def findCityByTitle(bot, message):
    city = getCityByTitle(message)
    
    if city == None:
        return await bot.send_message (message.from_user.id, '–í–∫–∞–∑–∞–Ω–æ–≥–æ –≤–∞–º–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
    
    current_time = str(datetime.datetime.now().time())
    time_to_find = current_time.split(":")
    
    light_status_groups = []
    
    for group in city['groups']:
        for x in group['schedule']:
            if str(x['time']) == str(time_to_find[0]):
                status = ""
                if str(x['light']) == 'on':
                    status = '–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ'
                elif str(x['light']) == 'maybe':
                    status = '–ú–æ–∂–ª–∏–≤–µ –≤–∫–ª—é—á–µ–Ω–Ω—è –∞–±–æ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è ‚ö†Ô∏è'
                elif str(x['light']) == 'off':
                    status = '–í–∏–º–∫–Ω–µ–Ω–æ ‚ùå'
                light_status_groups.append(status)
            
    markup = types.InlineKeyboardMarkup(row_width=2)
    show_schedule_btn = types.InlineKeyboardButton("‚è± –†–æ–∑–∫–ª–∞–¥", callback_data = "schedule_"+str(city['city_id']))
    show_notification_btn = types.InlineKeyboardButton("üîä –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data = "notification_"+str(city['city_id']))
    markup.add(show_schedule_btn, show_notification_btn)
            
    text_message = ("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –ø–æ–¥–∞—á—ñ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó —É –º."+city['city_name']+":\n"+
                    "‚ö°Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–µ—Ä–≥: - "+str(len(city['groups'])) +"\n"+
                    "‚ùï –°—Ç–∞–Ω–æ–º –Ω–∞ "+time_to_find[0]+":"+time_to_find[1]+", —Å—Ç–∞—Ç—É—Å –µ–ª–µ–∫—Ç—Ä–æ–º–µ—Ä–µ–∂—ñ –≤ \n"+"\n".join('=== '+str(light_status_groups.index(x)+1)+' - —ñ–π —á–µ—Ä–∑—ñ: '+ x for x in light_status_groups))
    
    return await bot.send_message(message.from_user.id, text_message, reply_markup=markup)



async def show_schedule(bot, query):
    groups = getCitiesGroups(query)
    
    city_name = query.message.text.split("–º.")
    city_name = city_name[1].split(":")
    city_name = city_name[0]
    
    text_schedule = ""
    
    for group in groups:
        
        for schedule in group['schedule']:
            if schedule['light'] == 'on':
               text_schedule += str(schedule['time'])+ " "
            else:
                text_schedule += "="
            if group['schedule'].index(schedule) == len(group['schedule']) - 1 and not groups.index(group) == len(groups) - 1:
                text_schedule += "\n" 
             
             
    text_schedule = text_schedule.split("\n")
    text = ""
    
    for period_of_time in text_schedule:
        text += "‚ö°Ô∏è –ß–µ—Ä–≥–∞ ‚Ññ" + str(text_schedule.index(period_of_time)+1) + ":\n" 
        period_of_time = period_of_time.split("=")
        for x in period_of_time:
            if not x == '':
                mass = [int(i) for i in x.split()]
                mass.append(mass[len(mass)-1]+1)
                text += "‚è± " + str(mass[0]) + " - " + str(mass[len(mass)-1]) + "\n"
                
                
    print(text)
        
    
    text_message = ('<b>–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –ø–æ–¥–∞—á—ñ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –º.'+city_name+'üá∫üá¶:</b>\n' + text)
    
    await bot.send_message(query.from_user.id, text_message, parse_mode='HTML')