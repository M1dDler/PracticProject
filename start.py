import telebot
import asyncio
import os
from API.api import keep_alive
from dotenv import load_dotenv
from telebot.async_telebot import AsyncTeleBot
from TelegramPages.mainpage import *
from TelegramPages.cities import *
from TelegramRequests.dataRequests import *

load_dotenv()
token = os.getenv("BOTTOKEN")
bot = AsyncTeleBot(token)

@bot.message_handler(func=lambda message: True)
async def handle_all_messages(message):
    if message.content_type == 'text':
        if not message.entities == None:
            if message.entities[0].type == 'bot_command':
                
                if message.text == '/start':
                    return await mainpage(bot, message)
            return
        
        if message.text == '–°–ø–∏—Å–æ–∫ –Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç—ñ–≤ üèò':
            return await cities(bot, message)

        return await findCityByTitle(bot, message)


@bot.callback_query_handler(func=lambda query: True)
async def balance_calldata(query):
    data = query.data.split('_')
        
    if data[0] == "schedule":
        await show_schedule_on(bot, query)
        await show_schedule_maybe(bot, query)
        return await show_schedule_off(bot, query)
    
    if data[0] == "notification":
        return await notification(bot, query)
    
    if data[0] == "group":
        telegram_id = data[1]
        city_id = data[2]
        city_group = data[3]
        statusCode = postNotifications(telegram_id, city_id, city_group)
        if statusCode == 200:
            return await bot.send_message(query.from_user.id, "üîä –í–∏ –≤–∫–ª—é—á–∏–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø–æ –ø–æ–¥–∞—á—ñ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è "+str(city_group)+"-—ó –≥—Ä—É–ø–∏!", timeout=30)
        return await bot.send_message(query.from_user.id, "‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞! –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –¥–∞–Ω–æ—ó –≥—Ä—É–ø–∏ –∑–∞–¥–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ –≤–∂–µ —É–≤—ñ–º–∫–Ω—É—Ç–æ!")
    
    if data[0] == "delete" and data[1] == "group":
        telegram_id = data[2]
        statusCode = deleteNotifications(telegram_id)
        if statusCode == 200:
            return await bot.send_message(query.from_user.id, "üîá –í—Å—ñ –Ω–∞—è–≤–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–º–∫–Ω—É—Ç–æ!", timeout=30)
        return await bot.send_message(query.from_user.id, "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ!", timeout=30)  
        
keep_alive()
asyncio.run(bot.infinity_polling())